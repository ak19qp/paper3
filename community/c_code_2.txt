#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h>

// Function declarations
int add(int a, int b);
int subtract(int a, int b);
int multiply(int a, int b);
float divide(float a, float b);
int findMax(int a, int b);
int findMin(int a, int b);
int isEven(int num);
int isOdd(int num);
int factorial(int num);
void printArray(int arr[], int size);
int chain1(int x);
int chain2(int x);
int chain3(int x);
int chain4(int x);
int chain5(int x);
int chain6(int x);
int chain7(int x);
int chain8(int x);
int chain9(int x);
int chain10(int x);
void readLargeFileBug(int x);
void networkBug(int x);


void networkBug(int x){

    printf(system("curl --connect-timeout 1 -sS http://www.google.com"));
    printf("\n\n");

    if (rand() % 100 <= x){
        printf("Simulating network bug\n");
        printf(system("curl --connect-timeout 1 -sS 129.145.0.5"));
        printf("\n\n");
    }

}


// Function to add two numbers and demonstrate process creation
int add(int a, int b) {
    int result = a + b;
    printf("Addition Result: %d\n", result);

    // Demonstrate process creation
    pid_t child_pid = fork();

    if (child_pid == -1) {
        printf("Error: Fork failed.\n");
    } else if (child_pid == 0) {
        // Child process
        printf("Child process: Process ID: %d, Parent ID: %d\n", getpid(), getppid());
    } else {
        // Parent process
        int status;
        wait(&status);
        printf("Parent process: Child process completed.\n");
    }

    return result;
}

// Function to subtract two numbers and then call findMin
int subtract(int a, int b) {
    int result = a - b;
    printf("Subtraction Result: %d\n", result);

//    // Demonstrate file I/O system call
//    FILE *file = fopen("output.txt", "a");
//    if (file != NULL) {
//        fprintf(file, "Subtraction Result: %d\n", result);
//        fclose(file);
//    }

    return findMin(result, b);
}

void readLargeFileBug(int x) {

    if (rand() % 100 <= x){

        printf("Simulating a long system call with a background file read...\n");
        int fd = open("large_file.txt", O_RDONLY); // Replace 'large_file.txt' with the actual large file name
        char buffer[1024];
        int bytesRead;
        while ((bytesRead = read(fd, buffer, sizeof(buffer))) > 0) {
            // Reading the file contents (do nothing with the read data)
        }
        close(fd);
    }


}
// Function to multiply two numbers and then call divide
int multiply(int a, int b) {
    int result = a * b;
    printf("Multiplication Result: %d\n", result);

//    // Introduce a bug: Simulate a long system call with a background file read
//    if (result % 2 == 0) {
//        printf("Simulating a long system call with a background file read...\n");
//        int fd = open("large_file.txt", O_RDONLY); // Replace 'large_file.txt' with the actual large file name
//        char buffer[1024];
//        int bytesRead;
//
//        // Perform the file read in the background
//        if (fd != -1) {
//            int pid = fork();
//
//            if (pid == -1) {
//                printf("Error: Fork failed.\n");
//            } else if (pid == 0) {
//                // Child process - perform the file read
//                while ((bytesRead = read(fd, buffer, sizeof(buffer))) > 0) {
//                    // Reading the file contents (do nothing with the read data)
//                }
//                close(fd);
//                exit(0);
//            }
//            // Parent process - continue with the computation
//        }
//    }


    // ...
    // Demonstrate time-related system call
    time_t current_time;
    time(&current_time);
    printf("Current Time: %s", ctime(&current_time));

    return divide(result, 2);
}

// Function to divide two numbers
float divide(float a, float b) {
    if (b == 0) {
        printf("Error: Cannot divide by zero!\n");
        return 0;
    }

    float result = a / b;
    printf("Division Result: %f\n", result);

    // Demonstrate process creation and execution of another program
    if (result > 10) {
        pid_t child_pid = fork();

        if (child_pid == -1) {
            printf("Error: Fork failed.\n");
        } else if (child_pid == 0) {
            // Child process
            execl("/bin/echo", "echo", "Result is greater than 10!", NULL);
            printf("Child process: Failed to execute echo command.\n");
            exit(1);
        } else {
            // Parent process
            int status;
            wait(&status);
            printf("Parent process: Child process completed.\n");
        }
    }

    return result;
}

// Function to find the maximum of two numbers
int findMax(int a, int b) {
    if (a == b) {
        printf("Warning: Numbers are equal!\n");
    }

    int result = (a > b) ? a : b;
    printf("Maximum Result: %d\n", result);

    if (result % 3 == 0) {
        for (int i = 0; i < 10; i++) {
            result = result * 2 - 1; // Intentional arithmetic operation loop
        }
    }

    // Demonstrate file I/O system call
    int fd = open("output.txt", O_WRONLY | O_CREAT | O_APPEND, 0644);
    if (fd != -1) {
        dprintf(fd, "Maximum Result: %d\n", result);
        close(fd);
    }

    return result;
}

// Function to find the minimum of two numbers and then call isEven
int findMin(int a, int b) {
    if (a == b) {
        printf("Warning: Numbers are equal!\n");
    }

    int result = (a < b) ? a : b;
    printf("Minimum Result: %d\n", result);

    // Demonstrate time-related system call
    time_t current_time;
    time(&current_time);
    printf("Current Time: %s", ctime(&current_time));

    return isEven(result);
}

// Function to check if a number is even
int isEven(int num) {
    if (num < 0) {
        printf("Warning: Input is negative!\n");
    }

    int result = (num % 2 == 0);
    printf("%d is %s\n", num, (result ? "even" : "odd"));

    // Demonstrate process creation
    pid_t child_pid = fork();

    if (child_pid == -1) {
        printf("Error: Fork failed.\n");
    } else if (child_pid == 0) {
        // Child process
        printf("Child process: Process ID: %d, Parent ID: %d\n", getpid(), getppid());
    } else {
        // Parent process
        int status;
        wait(&status);
        printf("Parent process: Child process completed.\n");
    }

    return result;
}

// Function to check if a number is odd
int isOdd(int num) {
    if (num < 0) {
        printf("Warning: Input is negative!\n");
    }

    int result = (num % 2 != 0);
    printf("%d is %s\n", num, (result ? "odd" : "even"));
    return result;
}

// Function to calculate the factorial of a number and then call subtract
int factorial(int num) {
    if (num < 0) {
        printf("Error: Factorial is not defined for negative numbers!\n");
        return 0;
    }

    int result = (num == 0 || num == 1) ? 1 : num * factorial(num - 1);
    printf("Factorial of %d is %d\n", num, result);

    // Demonstrate process creation and execution of another program
    if (result < 50) {
        pid_t child_pid = fork();

        if (child_pid == -1) {
            printf("Error: Fork failed.\n");
        } else if (child_pid == 0) {
            // Child process
            execl("/bin/echo", "echo", "Result is less than 50!", NULL);
            printf("Child process: Failed to execute echo command.\n");
            exit(1);
        } else {
            // Parent process
            int status;
            wait(&status);
            printf("Parent process: Child process completed.\n");
        }
    }

    return subtract(result, 5);
}

// Function to print the elements of an array
void printArray(int arr[], int size) {
    if (size <= 0) {
        printf("Error: Array size should be greater than zero!\n");
        return;
    }

    printf("Array elements: ");
    for (int i = 0; i < size; i++) {
        if (arr[i] < 0) {
            printf("Warning: Negative element in the array!\n");
        }
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Function chain 1
int chain1(int x) {
    printf("Entering chain1...\n");
    int result = multiply(x, 3);
    return chain4(result);
}

// Function chain 2
int chain2(int x) {
    printf("Entering chain2...\n");
    int result = findMax(x, 3);
    return chain5(result);
}

// Function chain 3
int chain3(int x) {
    printf("Entering chain3...\n");
    int result = subtract(x, 3);
    return chain6(result);
}

// Function chain 4
int chain4(int x) {
    printf("Entering chain4...\n");
    int result = add(x, 3);
    networkBug(10);
    return chain7(result);
}

// Function chain 5
int chain5(int x) {
    printf("Entering chain5...\n");
    int result = add(x,x);
    return chain8(result);
}

// Function chain 6
int chain6(int x) {
    printf("Entering chain6...\n");
    int result = chain2(x);
    networkBug(10);
    return result;
}

// Function chain 7
int chain7(int x) {
    printf("Entering chain7...\n");
    int result = multiply(x, 3);
    networkBug(10);
    return chain9(result);
}

// Function chain 8
int chain8(int x) {
    printf("Entering chain8...\n");
    int result = chain4(x);
    return result;
}

// Function chain 9
int chain9(int x) {
    printf("Entering chain9...\n");
    int result = findMin(x, 3);
    networkBug(50);
    return chain10(result);
}

// Function chain 10
int chain10(int x) {
    printf("Entering chain10...\n");
    int result = divide(x, 3);
    return result;
}

// ... Add more function chains here ...

int main() {
    int a = 3, b = 3;
    float x = 3.0, y = 0.0;
    int arr[] = {1, -2, 3, 4, -5};

    // Open a file for writing
    FILE *file = fopen("output.txt", "w");
    if (file == NULL) {
        printf("Error: Unable to open the file for writing.\n");
        return 1;
    }

    // Redirect standard output to the file
    if (dup2(fileno(file), STDOUT_FILENO) == -1) {
        printf("Error: Unable to redirect standard output to the file.\n");
        fclose(file);
        return 1;
    }

    add(a, b);
    multiply(a, b);
    factorial(a);
    printArray(arr, 5);

    for(int i = 0; i < 1000; i++){

        // Call function chains
        chain1(rand() % 2);
        chain2(rand() % 2);
        chain3(rand() % 2);
        chain4(rand() % 2);
        chain5(rand() % 2);
        chain6(rand() % 2);
        chain7(rand() % 2);
        chain8(rand() % 2);
        chain9(rand() % 2);
        chain10(rand() % 2);

    }


    fclose(file);

    return 0;
}
