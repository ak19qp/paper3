

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h>
#include <curl/curl.h>


// Function declarations
int add(int a, int b);
int subtract(int a, int b);
int multiply(int a, int b);
float divide(float a, float b);
int findMax(int a, int b);
int findMin(int a, int b);
int isEven(int num);
int isOdd(int num);
void printArray(int arr[], int size);
int chain1(int x);
int chain2(int x);
int chain3(int x);
int chain4(int x);
int chain5(int x);
int chain6(int x);
int chain7(int x);
int chain8(int x);
int chain9(int x);
int chain10(int x);
void networkBug(int x);
int factorial(int n);
int facto();


static size_t write_data(void *ptr, size_t size, size_t nmemb, void *stream)
{
    size_t written = fwrite(ptr, size, nmemb, (FILE*) stream);
    return written;
}


void networkBug(int x){


    CURL * curl;
    FILE * fp;
    CURLcode res;



    // Initialize libcurl
    curl_global_init(CURL_GLOBAL_DEFAULT);
    curl = curl_easy_init();
    if (curl)
    {
        fp = fopen("output.txt", "wb");

        // Set the URL
        if (rand() % 100 <= x){
            printf("Simulating network bug\n");
            curl_easy_setopt(curl, CURLOPT_URL, "http://www.northsouth.edu");
        }else{
            printf("No bugs selected\n");
            curl_easy_setopt(curl, CURLOPT_URL, "http://www.google.com");
        }

        curl_easy_setopt(curl, CURLOPT_TIMEOUT_MS, 1000);


        // Make the request
        res = curl_easy_perform(curl);
        // Check for errors
        if (res != CURLE_OK)
        {
            fprintf(stderr, "curl_easy_perform() failed: %s\n", curl_easy_strerror(res));
        }

        // Cleanup
        fclose(fp);
        curl_easy_cleanup(curl);
    }

    // Cleanup libcurl
    curl_global_cleanup();
}

//void networkBug(int x){
//
//    char y = system("curl --connect-timeout 1 -sS http://www.google.com");
//
//    printf(y);
//    printf("\n\n");
//
//    if (rand() % 100 <= x){
//        printf("Simulating network bug\n");
//        char y = system("curl --connect-timeout 1 -sS http://www.northsouth.edu");
//
//        printf(y);
//        printf("\n\n");
//    }
//
//}


// Function to add two numbers and demonstrate process creation
int add(int a, int b) {
    fato();
    int result = + b;
    printf("Addition Result: %d\n", result);

    return result;
}

// Function to subtract two numbers and then call findMin
int subtract(int a, int b) {
    fato();
    int result = a - b;
    printf("Subtraction Result: %d\n", result);


    return findMin(result, b);
}


// Function to multiply two numbers and then call divide
int multiply(int a, int b) {
    fato();
    int result = a * b;
    printf("Multiplication Result: %d\n", result);


    time_t current_time;
    time(&current_time);
    printf("Current Time: %s", ctime(&current_time));

    return divide(result, 2);
}

// Function to divide two numbers
float divide(float a, float b) {
    fato();
    if (b == 0) {
        printf("Error: Cannot divide by zero!\n");
        return 0;
    }

    float result = a / b;
    printf("Division Result: %f\n", result);


    return result;
}

// Function to find the maximum of two numbers
int findMax(int a, int b) {
    fato();
    if (a == b) {
        printf("Warning: Numbers are equal!\n");
    }

    int result = (a > b) ? a : b;
    printf("Maximum Result: %d\n", result);

    if (result % 3 == 0) {
        for (int i = 0; i < 10; i++) {
            result = result * 2 - 1; // Intentional arithmetic operation loop
        }
    }

    // Demonstrate file I/O system call
    int fd = open("output.txt", O_WRONLY | O_CREAT | O_APPEND, 0644);
    if (fd != -1) {
        dprintf(fd, "Maximum Result: %d\n", result);
        close(fd);
    }

    return result;
}

// Function to find the minimum of two numbers and then call isEven
int findMin(int a, int b) {
    fato();
    if (a == b) {
        printf("Warning: Numbers are equal!\n");
    }

    int result = (a < b) ? a : b;
    printf("Minimum Result: %d\n", result);

    // Demonstrate time-related system call
    time_t current_time;
    time(&current_time);
    printf("Current Time: %s", ctime(&current_time));

    return isEven(result);
}

// Function to check if a number is even
int isEven(int num) {
    fato();
    if (num < 0) {
        printf("Warning: Input is negative!\n");
    }

    int result = (num % 2 == 0);
    printf("%d is %s\n", num, (result ? "even" : "odd"));


    return result;
}

// Function to check if a number is odd
int isOdd(int num) {
    fato();
    if (num < 0) {
        printf("Warning: Input is negative!\n");
    }

    int result = (num % 2 != 0);
    printf("%d is %s\n", num, (result ? "odd" : "even"));
    return result;
}

// Function to print the elements of an array
void printArray(int arr[], int size) {
    fato();
    if (size <= 0) {
        printf("Error: Array size should be greater than zero!\n");
        return;
    }

    printf("Array elements: ");
    for (int i = 0; i < size; i++) {
        if (arr[i] < 0) {
            printf("Warning: Negative element in the array!\n");
        }
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Function chain 1
int chain1(int x) {
    fato();
    printf("Entering chain1...\n");
    int result = multiply(x, 3);
    return chain4(result);
}

// Function chain 2
int chain2(int x) {
    fato();
    printf("Entering chain2...\n");
    int result = findMax(x, 3);
    return chain5(result);
}

// Function chain 3
int chain3(int x) {
    fato();
    printf("Entering chain3...\n");
    int result = subtract(x, 3);
    return chain6(result);
}

// Function chain 4
int chain4(int x) {
    fato();
    printf("Entering chain4...\n");
    int result = add(x, 3);
    networkBug(10);
    return chain7(result);
}

// Function chain 5
int chain5(int x) {
    fato();
    printf("Entering chain5...\n");
    int result = add(x,x);
    return chain8(result);
}

// Function chain 6
int chain6(int x) {
    fato();
    printf("Entering chain6...\n");
    int result = chain2(x);
    networkBug(10);
    return result;
}

// Function chain 7
int chain7(int x) {
    fato();
    printf("Entering chain7...\n");
    int result = multiply(x, 3);
    networkBug(10);
    return chain9(result);
}

// Function chain 8
int chain8(int x) {
    fato();
    printf("Entering chain8...\n");
    int result = chain4(x);
    return result;
}

// Function chain 9
int chain9(int x) {
    fato();
    printf("Entering chain9...\n");
    int result = findMin(x, 3);
    networkBug(50);
    return chain10(result);
}

// Function chain 10
int chain10(int x) {
    fato();
    printf("Entering chain10...\n");
    int result = divide(x, 3);
    return result;
}


int factorial(int n)
{

    for(int i=2;i<=n;i++)
    {
        int c=0;
        for(int j=1;j<=i;j++)
        {
            if(i%j==0)
            {
                c++;
            }
        }

       if(c==2)
        {
            i;
        }
    }
    return 0;
}

int fato()
{
    return factorial(1000);
}
// ... Add more function chains here ...

int main() {

    int a = 3, b = 3;
    float x = 3.0, y = 0.0;
    int arr[] = {1, -2, 3, 4, -5};



    add(a, b);
    multiply(a, b);

    printArray(arr, 5);

    for(int i = 0; i < 2; i++){
        add(a, b);
        multiply(a, b);
        printArray(arr, 5);
        // Call function chains
        chain1(rand() % 2);
        chain2(rand() % 2);
        chain3(rand() % 2);
        chain4(rand() % 2);
        chain5(rand() % 2);
        chain6(rand() % 2);
        chain7(rand() % 2);
        chain8(rand() % 2);
        chain9(rand() % 2);
        chain10(rand() % 2);

    }



    return 0;
}
